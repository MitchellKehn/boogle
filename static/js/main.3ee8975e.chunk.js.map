{"version":3,"sources":["logic/arrayUtils.js","components/LetterGrid.js","components/SearchBar.js","language/dictionary.js","components/WordDefinition.js","components/WordList.js","logic/solver.js","logic/generator.js","logic/game.js","components/Scoreboard.js","components/CountdownTimer.js","App.js","index.js"],"names":["type","x","Object","prototype","toString","call","allCompareEqual","array","every","isArray","getLength","length","allDeepEqual","things","map","arrays","_","i","reduce","a","b","containsSubarray","subarray","randomChoice","pop","index","Math","floor","random","randomElement","splice","LetterGrid","rowCount","this","props","letters","columnCount","rows","columns","j","color","solvePath","letter","push","Grid","Column","Button","fluid","size","isMobile","content","onClick","addLetter","Row","celled","React","Component","SearchBar","inputRef","createRef","current","focus","Input","error","isValid","placeholder","onChange","event","onUpdate","target","value","word","ref","headers","getWordInfo","Promise","resolve","reject","fetch","response","json","values","status","compactStyle","marginTop","marginBottom","WordDefinition","state","info","getPlaceholder","bind","getNoWordsFound","setState","Header","as","Placeholder","style","minWidth","Line","Paragraph","meanings","e","Divider","undefined","join","WordList","List","animated","selection","relaxed","verticalAlign","height","overflowY","words","Item","Popup","wide","on","position","onOpen","onPreview","text","onClose","onPreviewClose","trigger","Content","floated","enabled","maxHeight","onEnabledToggle","disableWord","enableWord","solve","letterGrid","solveStep","currentCell","visitedCells","allCells","neighbouringCells","y","availableCells","cell","availableLetter","toUpperCase","startsWith","slice","dice","generateGameBoard","width","gameBoard","row","JSON","parse","stringify","die","getScore","max","Word","Scoreboard","wordCount","score","wordList","Statistic","Group","widths","label","formatSeconds","sec_num","round","hours","minutes","seconds","timeoutMessages","timeoutSubMessages","timeoutIcons","timerOptions","key","CountdownTimer","isActive","duration","stopTime","displayText","isDimmerActive","dimmerText","dimmerMessage","dimmerIcon","timerId","startTimer","handleTimerUpdate","onTimerFinish","stopTimer","Date","now","setInterval","setTimeout","until","clearInterval","icon","fontSize","labelPosition","Dropdown","inline","options","data","Dimmer","active","page","onClickOutside","Icon","name","inverted","App","grid","inputIsDisabled","resetGame","focusSearchField","handleWordUpdate","handleSearchFormSubmit","handleWordPreview","handleWordPreviewClose","onWordEnabledChange","searchFieldRef","lastInput","toLowerCase","className","Container","Segment","divided","stackable","link","href","Form","onSubmit","primary","disabled","secondary","force","isBrowser","ReactDOM","render","StrictMode","rel","document","getElementById"],"mappings":"8RAEA,SAASA,EAAKC,GAEV,OAAOC,OAAOC,UAAUC,SAASC,KAAKJ,GAU1C,SAASK,EAAgBC,GAGrB,OAAOA,EAAMC,OAAM,SAASP,GAAG,OAAOA,IAAIM,EAAM,MAGpD,SAASE,EAAQR,GAAI,OAAOD,EAAKC,KAAKD,EAAK,IAC3C,SAASU,EAAUT,GAAI,OAAOA,EAAEU,OAKhC,SAASC,EAAaC,GAElB,OAAIA,EAAOL,MAAMC,GACNH,EAAgBO,EAAOC,IAAIJ,MAvB7BK,EAwBcF,EAtBhBE,EAAO,GAAGD,KAAI,SAASE,EAAEC,GAC5B,OAAOF,EAAOD,KAAI,SAASP,GAAO,OAAOA,EAAMU,UAqBpBH,IAAIF,GARDM,QAAO,SAASC,EAAEC,GAAG,OAAOD,GAAGC,KAAG,GAWzDd,EAAgBO,GAX/B,IAhBaE,EAoCN,SAASM,EAAiBd,EAAOe,GACpC,IAAKb,EAAQF,GAAS,OAAO,EADiB,oBAGxBA,GAHwB,IAG9C,2BAA6B,CACzB,GAAIK,EAAa,CADQ,QACEU,IACvB,OAAO,GAL+B,8BAQ9C,OAAO,EAUJ,SAASC,EAAahB,GAAmB,IAAZiB,EAAW,wDACrCC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWrB,EAAMI,QACzCkB,EAAgBtB,EAAMkB,GAM5B,OAJID,GACAjB,EAAMuB,OAAOL,EAAO,GAGjBI,E,YCbIE,E,uKAjCP,IANM,IAAD,OACDC,EAAWC,KAAKC,MAAMC,QAAQxB,OAC9ByB,EAAcH,KAAKC,MAAMC,QAAQ,GAAGxB,OAEpC0B,EAAO,GAEFpB,EAAE,EAAGA,EAAEe,EAAUf,IAAK,CAE3B,IADA,IAAIqB,EAAU,GADa,WAElBC,GACL,IACIC,EADWnB,EAAiB,EAAKa,MAAMO,UAAW,CAACxB,EAAGsB,IACnC,OAAS,KAE5BG,EAAS,EAAKR,MAAMC,QAAQlB,GAAGsB,GACnCD,EAAQK,KACJ,kBAACC,EAAA,EAAKC,OAAN,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAK,EACLC,KAAMC,WAAW,SAAW,UAC5BT,MAAOA,EACPU,QAASR,EACTS,QAAS,kBAAM,EAAKjB,MAAMkB,UAAUV,SAX/CH,EAAE,EAAGA,EAAEH,EAAaG,IAAM,EAA1BA,GAgBTF,EAAKM,KACD,kBAACC,EAAA,EAAKS,IAAN,CAAUf,QAASF,GACdE,IAKb,OACI,kBAACM,EAAA,EAAD,CAAMU,OAAO,aAAajB,KAAML,GAC3BK,O,GAlCQkB,IAAMC,W,8DCmBhBC,E,kDAxBX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAEDwB,SAAWH,IAAMI,YAHP,E,oDAOf1B,KAAKyB,SAASE,QAAQC,U,+BAGhB,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,CAAOf,OAAK,EACLC,KAAK,OACLe,OAAQ9B,KAAKC,MAAM8B,QACnBC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAW,EAAKjC,MAAMkC,SAASD,EAAME,OAAOC,QACtDA,MAAOrC,KAAKC,MAAMqC,KAClBC,IAAKvC,KAAKyB,e,GAnBLH,IAAMC,W,6DCTxBiB,EAAU,CACZ,iBAAkB,qDAClB,kBAAmB,6BAUhB,SAASC,EAAYH,GACxB,OAAO,IAAII,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAA1D,EAAA,sEACQ2D,MAAM,2CAA6CP,EAAM,CAC5E,OAAU,MACV,QAAWE,IAHA,cACTM,EADS,gBAKMA,EAASC,OALf,QAKTC,EALS,QAMT,MAAgC,MAApBF,EAASG,OAE3BN,EAAQK,GARO,2CAAZ,yDCRX,IAAME,EAAe,CACjBC,UAAW,EACXC,aAAc,GAwFHC,E,kDApFX,WAAYpD,GAAQ,IAAD,8BACf,cAAMA,IAEDqD,MAAQ,CACTC,KAAM,MAGV,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBARR,E,gMAWIhB,EAAYzC,KAAKC,MAAMqC,M,OAApCiB,E,OACNvD,KAAK2D,SAAS,CAACJ,KAAMA,I,6IAIrB,OACI,oCACI,kBAACK,EAAA,EAAD,CAAQC,GAAG,MAAM7D,KAAKC,MAAMqC,MAC5B,kBAACwB,EAAA,EAAD,CAAaC,MAAO,CAAEC,SAAU,UAC5B,kBAACF,EAAA,EAAYF,OAAb,KACI,kBAACE,EAAA,EAAYG,KAAb,OAEJ,kBAACH,EAAA,EAAYI,UAAb,KACI,kBAACJ,EAAA,EAAYG,KAAb,MACA,kBAACH,EAAA,EAAYG,KAAb,MACA,kBAACH,EAAA,EAAYG,KAAb,W,wCAQhB,OACI,oCACI,kBAACL,EAAA,EAAD,CAAQC,GAAG,MAAM7D,KAAKC,MAAMqC,MAC5B,kBAACsB,EAAA,EAAD,CAAQC,GAAG,KAAKtD,MAAM,OAAtB,sB,+BAMR,GAAwB,OAApBP,KAAKsD,MAAMC,KACX,OAAQvD,KAAKwD,iBAEjB,IAAKxD,KAAKsD,MAAMC,KAAX,MACD,OAAQvD,KAAK0D,kBAEjB,IAAMS,EAAW,CACb,kBAACP,EAAA,EAAD,CAAQ7C,KAAK,OAAO8C,GAAG,KAAKE,MAAOb,GAC9BlD,KAAKC,MAAMqC,OAKpB,IACI6B,EAASzD,KAAK,2BAAIV,KAAKsD,MAAMC,KAAX,oBACpB,MAAOa,GACL,IACID,EAASzD,KAAK,2BAAIV,KAAKsD,MAAMC,KAAX,gBACpB,MAAOa,KAIb,IAAK,IAAD,gBACuBpE,KAAKsD,MAAMC,KAAX,SADvB,IACA,2BAAmD,CAAC,IAAzCT,EAAwC,QAC/CqB,EAASzD,KACL,6BACI,kBAAC2D,EAAA,EAAD,MACA,kBAACT,EAAA,EAAD,CAAQC,GAAG,KAAKE,MAAOb,GAAeJ,EAAQ,mBACpBwB,IAAzBxB,EAAQ,SACL,uBAAGiB,MAAOb,GAAc,wCAAcJ,EAAQ,SAAayB,KAAK,QAC9D,GACN,uBAAGR,MAAOb,GAAeJ,EAAQ,eAT7C,+BAaF,MAAOsB,IAET,OAAOD,M,GAjFc7C,IAAMC,WC2DpBiD,E,uKAhED,IAAD,OAUL,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EACRrD,QAAM,EACNsD,WAAS,EACTC,SAAO,EACP7D,KAAK,OACL8D,cAAc,SACdd,MAAO,CAACe,OAAQ,OAAQC,UAAW,WAEpC/E,KAAKC,MAAM+E,MAAMnG,KAAI,SAAAyD,GAAI,OACtB,kBAACmC,EAAA,EAAKQ,KAAN,KACI,kBAACC,EAAA,EAAD,CAAOC,MAAI,EACJC,GAAG,QACHC,SAAS,eACTC,OAAQ,kBAAM,EAAKrF,MAAMsF,UAAUjD,EAAKkD,OACxCC,QAAS,EAAKxF,MAAMyF,eACpBC,QACS,kBAAClB,EAAA,EAAKmB,QAAN,CAAcC,QAAQ,QAClB,kBAACpB,EAAA,EAAKb,OAAN,KACKtB,EAAKwD,QAAUxD,EAAKkD,KACL,6BAAMlD,EAAKkD,QAI5CzB,MAAO,CACHgC,UAAW,IACXhB,UAAW,WAGtB,kBAACG,EAAA,EAAMU,QAAP,KACI,kBAAC,EAAD,CAAgBtD,KAAMA,EAAKkD,SAG/B,kBAACf,EAAA,EAAKmB,QAAN,CAAcC,QAAQ,SACjBvD,EAAKwD,QAAU,kBAACjF,EAAA,EAAD,CAAQE,KAAK,OAELG,QAAS,kBAzCjC,SAACoB,GACjBA,EAAKwD,SAAU,EACf,EAAK7F,MAAM+F,kBAuC0CC,CAAY3D,KAFjC,cAMA,kBAACzB,EAAA,EAAD,CAAQE,KAAK,OACLR,MAAM,OACNW,QAAS,kBAnDlC,SAACoB,GAChBA,EAAKwD,SAAU,EACf,EAAK7F,MAAM+F,kBAiD0CE,CAAW5D,KAFhC,sB,GAnDrBhB,IAAMC,WC2CtB,SAAS4E,EAAM7D,EAAM8D,GACxB,IAAIrG,EAAWqG,EAAW1H,OACtByB,EAAciG,EAAW1H,OAK7B,OAGJ,SAAS2H,EAAU/D,EAAMgE,EAAaC,EAAcH,EAAYrG,EAAUI,GAEtE,GAAoB,IAAhBmC,EAAK5D,OACL,OAAO6H,EAHwE,oBAjDvF,SAAwBD,EAAavG,EAAUI,GAE3C,GAAoB,OAAhBmG,EAAsB,CAGtB,IAFA,IAAIE,EAAW,GAENxH,EAAE,EAAGA,EAAEe,EAAUf,IACtB,IAAK,IAAIsB,EAAE,EAAGA,EAAEH,EAAaG,IACzBkG,EAAS9F,KAAK,CAAC1B,EAAGsB,IAI1B,OAAOkG,EAIP,IAFA,IAAIC,EAAoB,GAEfzH,GAAG,EAAGA,GAAG,EAAGA,IACjB,IAAK,IAAIsB,GAAG,EAAGA,GAAG,EAAGA,IAAK,CACtB,IAAItC,EAAIsI,EAAY,GAAKtH,EACrB0H,EAAIJ,EAAY,GAAKhG,EAErBtC,EAAI,GAAK0I,EAAI,IACP,IAAN1H,GAAiB,IAANsB,GACXtC,GAAK+B,GAAY2G,GAAKvG,GAE1BsG,EAAkB/F,KAAK,CAAC1C,EAAG0I,KAInC,OAAOD,EA2BQE,CAAeL,EAAavG,EAAUI,IAN0B,IAMnF,2BAAuE,CAAC,IAA7DyG,EAA4D,QACnE,IAAIxH,EAAiBmH,EAAcK,GAAnC,CAIA,IAAIC,EAAkBT,EAAWQ,EAAK,IAAIA,EAAK,IAAIE,cAGnD,GAAIxE,EAAKyE,WAAWF,GAAkB,CAClCN,EAAa7F,KAAKkG,GAClB,IAAI9D,EAAWuD,EAAU/D,EAAK0E,MAAMH,EAAgBnI,OAAQ4D,EAAK5D,QAASkI,EAAML,EAAcH,EAAYrG,EAAUI,GAEpH,GAAiB,OAAb2C,EAKA,OAAOA,EAHPyD,EAAahH,SApB0D,8BA2BnF,OAAO,KA9BA8G,CAAU/D,EAAKwE,cAHJ,KACC,GAE6CV,EAAYrG,EAAUI,GCnD1F,IAAM8G,EAAO,CACT,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,KAAM,IAAK,IAAK,IAAK,IAAK,KAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAiBvB,SAASC,EAAkBC,EAAOrC,GAKrC,IAJA,IAAMsC,EAAY,GAEdH,EAAO,GAEFjI,EAAE,EAAGA,EAAEmI,EAAOnI,IAAK,CAGxB,IAFA,IAAMqI,EAAM,GAEH/G,EAAE,EAAGA,EAAE6G,EAAO7G,IAAK,CACJ,IAAhB2G,EAAKvI,SACLuI,EApBLK,KAAKC,MAAMD,KAAKE,UAAUP,KAsBzB,IAAMQ,EAAMnI,EAAa2H,GAAM,GACzBxG,EAASnB,EAAamI,GAC5BJ,EAAI3G,KAAKD,GAEb2G,EAAU1G,KAAK2G,GAGnB,OAAOD,E,aCnDJ,SAASM,EAASpF,GACrB,OAAO7C,KAAKkI,IAAIrF,EAAK5D,OAAS,EAAG,GAG9B,IAAMkJ,EACT,WAAYtF,GAAO,oBACftC,KAAKwF,KAAOlD,EACZtC,KAAK8F,SAAU,GCcR+B,E,uKAnBP,IADK,EACDC,EAAY,EACZC,EAAQ,EAFP,cAIc/H,KAAKC,MAAM+H,UAJzB,IAIL,2BAAwC,CAAC,IAA9B1F,EAA6B,QAChCA,EAAKwD,UACLgC,IACAC,GAASL,EAASpF,EAAKkD,QAP1B,8BAWL,OACI,kBAACyC,EAAA,EAAUC,MAAX,CAAiBC,OAAO,OACpB,kBAACF,EAAA,EAAD,CAAWG,MAAO,QAAoB,IAAZN,EAAc,IAAI,IAAKzF,MAAOyF,IACxD,kBAACG,EAAA,EAAD,CAAWG,MAAO,SAAiB,IAARL,EAAU,IAAI,IAAK1F,MAAO0F,S,GAf5CzG,IAAMC,W,kBCC/B,SAAS8G,GAAcC,GACnBA,EAAU7I,KAAK8I,MAAMD,GACrB,IAAIE,EAAU/I,KAAKC,MAAM4I,EAAU,MAC/BG,EAAUhJ,KAAKC,OAAO4I,EAAmB,KAARE,GAAiB,IAClDE,EAAUjJ,KAAK8I,MAAMD,EAAmB,KAARE,EAA2B,GAAVC,GAGrD,OADIC,EAAU,KAAKA,EAAU,IAAIA,GAC3B,GAAN,OAAUD,EAAV,YAAqBC,GAGzB,IAAMC,GAAkB,CACpB,aACA,qBACA,gBACA,WACA,UAGEC,GAAqB,CACvB,yBACA,sBACA,iCACA,iCACA,6CACA,uFACA,0BAGEC,GAAe,CACjB,qBACA,MACA,OACA,OACA,gBACA,oBACA,SACA,YACA,UAGEC,GAAe,CAMjB,CACIC,IAAK,EACLvD,KAAM,aACNnD,MAAO,IAEX,CACI0G,IAAK,EACLvD,KAAM,WACNnD,MAAO,IAEX,CACI0G,IAAK,EACLvD,KAAM,YACNnD,MAAO,KAEX,CACI0G,IAAK,EACLvD,KAAM,YACNnD,MAAO,MAIM2G,G,kDACjB,WAAY/I,GAAQ,IAAD,8BACf,cAAMA,IAEDqD,MAAQ,CACT2F,UAAU,EACVC,SAAUJ,GAAa,GAAGzG,MAC1B8G,SAAU,KACVC,YAAa,GAEbC,gBAAgB,EAChBC,WAAY,GACZC,cAAe,GACfC,WAAY,IAGhB,EAAKC,QAAU,KAEf,EAAKC,WAAa,EAAKA,WAAWjG,KAAhB,gBAClB,EAAKkG,kBAAoB,EAAKA,kBAAkBlG,KAAvB,gBACzB,EAAKmG,cAAgB,EAAKA,cAAcnG,KAAnB,gBACrB,EAAKoG,UAAY,EAAKA,UAAUpG,KAAf,gBApBF,E,yDAwBfzD,KAAK2D,SAAS,CACVsF,UAAU,EACVE,SAAUW,KAAKC,MAA8B,IAAtB/J,KAAKsD,MAAM4F,WAGtClJ,KAAKyJ,QAAUO,YAAYhK,KAAK2J,kBAAmB,KACnDM,WAAWjK,KAAK2J,kBAAmB,K,0CAInC,IAAII,EAAMD,KAAKC,MACXG,GAASlK,KAAKsD,MAAM6F,SAAWY,GAAO,IAE1C/J,KAAK2D,SAAS,CACVyF,YAAaf,GAAc5I,KAAKkI,IAAIuC,EAAO,MAG3CA,GAAS,GACTlK,KAAK4J,kB,sCAKT5J,KAAK6J,YACL7J,KAAK2D,SAAS,CACV0F,gBAAgB,EAChBC,WAAYhK,EAAaqJ,IACzBY,cAAejK,EAAasJ,IAC5BY,WAAYlK,EAAauJ,Q,kCAK7B7I,KAAK2D,SAAS,CACVsF,UAAU,EACVE,SAAU,KACVC,YAAa,KAEI,OAAjBpJ,KAAKyJ,SACLU,cAAcnK,KAAKyJ,W,6CAKvBzJ,KAAK6J,c,+BAGC,IAAD,OAkCL,MAAO,CA/BF7J,KAAKsD,MAAM2F,SAoBR,8BACI,kBAACpI,EAAA,EAAD,CAAQuJ,KAAK,QACLhC,MAAO,CAACrE,MAAO,CAACsG,SAAU,IAAKxG,GAAI,OAAQ5C,QAASjB,KAAKsD,MAAM8F,aAC/DkB,cAAc,OACdvJ,KAAK,OACLG,QAASlB,KAAK6J,aAvB1B,8CACkB,IACd,kBAACU,EAAA,EAAD,CAAUC,QAAM,EACNC,QAAS3B,GACTzG,MAAOrC,KAAKsD,MAAM4F,SAClBjH,SAAU,SAACC,EAAOwI,GAAR,OAAgB,EAAK/G,SAAS,CAACuF,SAAUwB,EAAKrI,WAElE,6BACA,kBAACxB,EAAA,EAAD,CAAQN,MAAM,QACNW,QAASlB,KAAK0J,YADtB,QAuBR,kBAACiB,EAAA,EAAD,CAAQC,OAAQ5K,KAAKsD,MAAM+F,eACnBwB,MAAI,EACJC,eAAgB,kBAAI,EAAKnH,SAAS,CAAC0F,gBAAgB,MAEvD,kBAAC0B,EAAA,EAAD,CAAMC,KAAMhL,KAAKsD,MAAMkG,WAAYzI,KAAK,YACxC,kBAAC6C,EAAA,EAAD,CAAQC,GAAG,KAAKoH,UAAQ,GAAEjL,KAAKsD,MAAMgG,YACrC,8BAAOtJ,KAAKsD,MAAMiG,qB,GAlHUjI,IAAMC,WC3D5CrB,GAAU,CACZ,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,OAyLLgL,G,kDApLX,WAAYjL,GAAQ,IAAD,8BACf,cAAMA,IAEDqD,MAAQ,CACThB,KAAM,GAEN6I,KAAMjL,GACNM,UAAW,KAEXwH,SAAU,GAEVoD,iBAAiB,GAGrB,EAAKrJ,QAAU,EAAKA,QAAQ0B,KAAb,gBACf,EAAK4H,UAAY,EAAKA,UAAU5H,KAAf,gBACjB,EAAKtC,UAAY,EAAKA,UAAUsC,KAAf,gBAEjB,EAAK6H,iBAAmB,EAAKA,iBAAiB7H,KAAtB,gBAExB,EAAK8H,iBAAmB,EAAKA,iBAAiB9H,KAAtB,gBACxB,EAAK+H,uBAAyB,EAAKA,uBAAuB/H,KAA5B,gBAE9B,EAAKgI,kBAAoB,EAAKA,kBAAkBhI,KAAvB,gBACzB,EAAKiI,uBAAyB,EAAKA,uBAAuBjI,KAA5B,gBAE9B,EAAKkI,oBAAsB,EAAKA,oBAAoBlI,KAAzB,gBAC3B,EAAKmI,eAAiBtK,IAAMI,YA3Bb,E,wDA+Bf1B,KAAK2D,SAAS,CACVrB,KAAM,GAEN6I,KAAMjE,EAAkB,GACxB1G,UAAW,KAEXwH,SAAU,O,0CAKdhI,KAAKqL,YACLrL,KAAKsL,kBAAiB,K,uCAGThJ,GAEb,IAAI9B,EAAY2F,EAAM7D,EAAMtC,KAAKsD,MAAM6H,MACvCnL,KAAK2D,SAAS,CACVrB,KAAMA,EACN9B,UAAWA,IAGfR,KAAKsL,qB,+CAIAtL,KAAKsD,MAAMhB,MACXtC,KAAK+B,YACV/B,KAAK2D,SAAS,CACVqE,SAAS,GAAD,mBAAMhI,KAAKsD,MAAM0E,UAAjB,CAA2B,IAAIJ,EAAK5H,KAAKsD,MAAMhB,QACvD9B,UAAW,KACX8B,KAAM,KAEVtC,KAAKsL,sB,wCAMShJ,GACdtC,KAAK6L,UAAY7L,KAAKsD,MAAMhB,KAC5BtC,KAAKuL,iBAAiBjJ,GACtBtC,KAAK2D,SAAS,CAACyH,iBAAiB,M,+CAIhCpL,KAAKuL,iBAAiBvL,KAAK6L,a,gCAI3B,OAAgC,OAAzB7L,KAAKsD,MAAM9C,WAAiD,IAA3BR,KAAKsD,MAAMhB,KAAK5D,S,gCAGlD+B,GACNT,KAAKuL,iBAAiBvL,KAAKsD,MAAMhB,KAAO7B,EAAOqL,iB,4CAO/C9L,KAAK2D,SAAS,CACVqE,SAAUhI,KAAKsD,MAAM0E,a,+BAInB,IAAD,OACL,OACI,yBAAK+D,UAAU,OACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACtL,EAAA,EAAD,CAAMuL,SAAO,EAACC,WAAS,GACnB,kBAACxL,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,KACI,kBAACqE,EAAA,EAAD,CAAMmH,MAAI,EAACvI,GAAG,IAAIwI,KAAM,0CACpB,kBAACzI,EAAA,EAAD,CAAQC,GAAG,KAAK9C,KAAK,QAArB,cAIZ,kBAACJ,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,CAAauG,MAAO,IAChB,kBAACxG,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,KACI,kBAAC0L,EAAA,EAAD,CAAMC,SAAUvM,KAAKwL,wBACjB,kBAAC,EAAD,CAAWlJ,KAAMtC,KAAKsD,MAAMhB,KACjBP,QAAS/B,KAAK+B,UACdI,SAAU,SAACG,GAAD,OAAU,EAAKiJ,iBAAiBjJ,IAC1CC,IAAKvC,KAAK4L,oBAKjC,kBAACjL,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,KACI,kBAAC,EAAD,CAAYV,QAASF,KAAKsD,MAAM6H,KACpB3K,UAAWR,KAAKsD,MAAM9C,UACtBW,UAAWnB,KAAKmB,cAIpC,kBAACR,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,KACI,kBAACC,EAAA,EAAOqH,MAAR,CAAcrC,QAAQ,SAClB,kBAAChF,EAAA,EAAD,CAAQuJ,MAAI,EAACrJ,KAAK,QAAQR,MAAM,QAAQW,QAASlB,KAAKwL,wBAAwB,kBAACT,EAAA,EAAD,CAAMC,KAAK,aACzF,kBAACnK,EAAA,EAAD,CAAQuJ,MAAI,EAACrJ,KAAK,QAAQyL,SAAO,EAACtL,QAASlB,KAAKqL,WAAW,kBAACN,EAAA,EAAD,CAAMC,KAAK,aACtE,kBAACnK,EAAA,EAAD,CAAQuJ,MAAI,EAACqC,UAAQ,EAAC1L,KAAK,QAAQ2L,WAAS,GAAC,kBAAC3B,EAAA,EAAD,CAAMC,KAAK,qBAM5E,kBAACrK,EAAA,EAAKC,OAAN,CAAauG,MAAO,GAChB,kBAACxG,EAAA,EAAD,CAAMkE,cAAc,UAChB,kBAAClE,EAAA,EAAKS,IAAN,CAAUf,QAAS,GACf,kBAACM,EAAA,EAAKC,OAAN,KACI,kBAAC,EAAD,CAAYoH,SAAUhI,KAAKsD,MAAM0E,YAErC,kBAACrH,EAAA,EAAKC,OAAN,KACI,kBAAC,GAAD,QAGR,kBAACD,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKC,OAAN,KACI,kBAAC,EAAD,CAAUoE,MAAOhF,KAAKsD,MAAM0E,SAClBzC,UAAWvF,KAAKyL,kBAChB/F,eAAgB1F,KAAK0L,uBACrB1F,gBAAiBhG,KAAK2L,iC,yCAc7C,IAAdgB,EAAa,yDACtBC,aAAaD,IACb3M,KAAK4L,eAAejK,QAAQC,Y,GAhLtBN,IAAMC,WCjBxBsL,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMC,IAAI,aAAaX,KAAK,mEAC5B,kBAAC,GAAD,OAEFY,SAASC,eAAe,W","file":"static/js/main.3ee8975e.chunk.js","sourcesContent":["\n// generally useful functions\nfunction type(x) { // does not work in general, but works on JSONable objects we care about... modify as you see fit\n    // e.g.  type(/asdf/g) --> \"[object RegExp]\"\n    return Object.prototype.toString.call(x);\n}\nfunction zip(arrays) {\n    // e.g. zip([[1,2,3],[4,5,6]]) --> [[1,4],[2,5],[3,6]]\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n\n// helper functions\nfunction allCompareEqual(array) {\n    // e.g.  allCompareEqual([2,2,2,2]) --> true\n    // does not work with nested arrays or objects\n    return array.every(function(x){return x===array[0]});\n}\n\nfunction isArray(x){ return type(x)===type([]) }\nfunction getLength(x){ return x.length }\nfunction allTrue(array){ return array.reduce(function(a,b){return a&&b},true) }\n// e.g. allTrue([true,true,true,true]) --> true\n// or just array.every(function(x){return x});\n\nfunction allDeepEqual(things) {\n    // works with nested arrays\n    if( things.every(isArray) )\n        return allCompareEqual(things.map(getLength))     // all arrays of same length\n            && allTrue(zip(things).map(allDeepEqual)); // elements recursively equal\n\n    else\n        return allCompareEqual(things);\n}\n\n/**\n * Element-wise comparison of subarrays\n * @param array an array of form [[int, int], ...]\n * @param subarray of form [int, int]\n * @returns {boolean}\n */\nexport function containsSubarray(array, subarray) {\n    if (!isArray(array)) {return false;}\n\n    for (const element of array) {\n        if (allDeepEqual([element, subarray])) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n/**\n * Return a random element chosen from an array\n * @param array\n * @param pop if the element should be removed from the array, or just returned.\n * @return an element from the array\n */\nexport function randomChoice(array, pop=false) {\n    const index = Math.floor(Math.random() * array.length);\n    const randomElement = array[index];\n\n    if (pop) {\n        array.splice(index, 1);\n    }\n\n    return randomElement;\n}","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport {containsSubarray} from \"../logic/arrayUtils\";\n\nimport { isBrowser, isMobile } from \"react-device-detect\";\n\n/**\n * Displays the boggle board.\n *\n * Can accept a list of input coordinates to show\n * the tiles that correspond to the current valid word input.\n *\n * Clicking on tiles adds those letters to the text field, lets the user\n * trace out their word.\n */\nclass LetterGrid extends React.Component {\n    render() {\n        let rowCount = this.props.letters.length;\n        let columnCount = this.props.letters[0].length;\n\n        let rows = [];\n\n        for (let i=0; i<rowCount; i++) {\n            let columns = [];\n            for (let j=0; j<columnCount; j++) {\n                let isActive = containsSubarray(this.props.solvePath, [i, j]);\n                let color = isActive ? \"blue\" : null;\n\n                let letter = this.props.letters[i][j]\n                columns.push(\n                    <Grid.Column>\n                        <Button fluid\n                                size={isMobile ? \"medium\" : \"massive\"}\n                                color={color}\n                                content={letter}\n                                onClick={() => this.props.addLetter(letter)}\n                        />\n                    </Grid.Column>\n                );\n            }\n            rows.push(\n                <Grid.Row columns={columnCount}>\n                    {columns}\n                </Grid.Row>\n            );\n        }\n\n        return (\n            <Grid celled=\"internally\" rows={rowCount}>\n                {rows}\n            </Grid>\n        );\n    }\n}\n\nexport default LetterGrid;","import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\n\n/**\n * Lets the user type in words to visualise on the board.\n *\n * If the word is somehow invalid, can show an error.\n * Hitting enter on a valid word should add the word to a word list.\n */\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.inputRef = React.createRef();\n    }\n\n    focus() {\n        this.inputRef.current.focus();\n    }\n\n    render() {\n        return (\n            <Input fluid\n                   size=\"huge\"\n                   error={!this.props.isValid}\n                   placeholder='Search...'\n                   onChange={(event) => this.props.onUpdate(event.target.value)}\n                   value={this.props.word}\n                   ref={this.inputRef}\n            />\n        );\n    }\n}\n\nexport default SearchBar;","const headers = {\n    \"x-rapidapi-key\": \"e2b2a2bcc2msh8c0763ccc9b20cep143af8jsn692df1da5f43\",\n    \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\"\n}\n\nconst dummy = {\"word\":\"test\",\"results\":[{\"definition\":\"trying something to find out about it\",\"partOfSpeech\":\"noun\",\"synonyms\":[\"trial\",\"trial run\",\"tryout\"],\"typeOf\":[\"experimentation\",\"experiment\"],\"hasTypes\":[\"trial balloon\",\"road test\",\"alpha test\",\"field test\",\"field trial\",\"beta test\"]},{\"definition\":\"any standardized procedure for measuring sensitivity or memory or intelligence or aptitude or personality etc\",\"partOfSpeech\":\"noun\",\"synonyms\":[\"mental test\",\"mental testing\",\"psychometric test\"],\"typeOf\":[\"mental measurement\"],\"hasTypes\":[\"sub-test\",\"personality test\",\"intelligence test\",\"iq test\"],\"examples\":[\"the test was standardized on a large sample of students\"]},{\"definition\":\"a set of questions or exercises evaluating skill or knowledge\",\"partOfSpeech\":\"noun\",\"synonyms\":[\"exam\",\"examination\"],\"typeOf\":[\"communicating\",\"communication\"],\"hasTypes\":[\"entrance exam\",\"bar exam\",\"bar examination\",\"comp\",\"comprehensive\",\"comprehensive examination\",\"entrance examination\",\"exam paper\",\"examination paper\",\"final\",\"final exam\",\"final examination\",\"litmus test\",\"midterm\",\"midterm exam\",\"midterm examination\",\"oral\",\"oral exam\",\"oral examination\",\"prelim\",\"preliminary exam\",\"preliminary examination\",\"question sheet\",\"quiz\",\"test paper\",\"tripos\",\"viva\",\"viva voce\"],\"examples\":[\"when the test was stolen the professor had to make a new set of questions\"]},{\"definition\":\"test or examine for the presence of disease or infection\",\"partOfSpeech\":\"verb\",\"synonyms\":[\"screen\"],\"typeOf\":[\"check\"]},{\"definition\":\"examine someone's knowledge of something\",\"partOfSpeech\":\"verb\",\"synonyms\":[\"quiz\"],\"typeOf\":[\"examine\"],\"derivation\":[\"testee\",\"testing\",\"tester\"],\"examples\":[\"The teacher tests us every week\"]},{\"definition\":\"put to the test, as for its quality, or give experimental use to\",\"partOfSpeech\":\"verb\",\"synonyms\":[\"essay\",\"examine\",\"prove\",\"try\",\"try out\"],\"typeOf\":[\"judge\",\"pass judgment\",\"evaluate\"],\"hasTypes\":[\"float\",\"control\",\"verify\",\"field-test\"],\"derivation\":[\"testing\"]},{\"definition\":\"the act of testing something\",\"partOfSpeech\":\"noun\",\"synonyms\":[\"run\",\"trial\"],\"typeOf\":[\"effort\",\"attempt\",\"endeavor\",\"endeavour\",\"try\"],\"hasTypes\":[\"try-on\",\"ministry of transportation test\",\"mot\",\"mot test\",\"audition\",\"pilot program\",\"pilot project\",\"preclinical phase\",\"preclinical test\",\"preclinical trial\",\"snellen test\",\"assay\",\"clinical test\",\"trying on\",\"tryout\",\"field trial\",\"fitting\",\"double blind\",\"clinical trial\"]},{\"definition\":\"the act of undergoing testing\",\"partOfSpeech\":\"noun\",\"synonyms\":[\"trial\"],\"typeOf\":[\"try\",\"endeavour\",\"endeavor\",\"effort\",\"attempt\"],\"examples\":[\"he survived the great test of battle\"]},{\"definition\":\"achieve a certain score or rating on a test\",\"partOfSpeech\":\"verb\",\"typeOf\":[\"score\"],\"examples\":[\"She tested high on the LSAT and was admitted to all the good law schools\"]},{\"definition\":\"a hard outer covering as of some amoebas and sea urchins\",\"partOfSpeech\":\"noun\",\"typeOf\":[\"natural covering\",\"cover\",\"covering\"]},{\"definition\":\"determine the presence or properties of (a substance)\",\"partOfSpeech\":\"verb\",\"typeOf\":[\"learn\",\"check\",\"determine\",\"see\",\"ascertain\",\"watch\",\"find out\"],\"derivation\":[\"testing\"]},{\"definition\":\"show a certain characteristic when tested\",\"partOfSpeech\":\"verb\",\"typeOf\":[\"be\"],\"derivation\":[\"testing\"],\"examples\":[\"He tested positive for HIV\"]},{\"definition\":\"undergo a test\",\"partOfSpeech\":\"verb\",\"typeOf\":[\"submit\",\"take\"],\"verbGroup\":[\"quiz\"],\"derivation\":[\"testee\"],\"examples\":[\"She doesn't test well\"]}],\"syllables\":{\"count\":1,\"list\":[\"test\"]},\"pronunciation\":{\"all\":\"tɛst\"},\"frequency\":4.9}\n\n/**\n * Get info about a word from the WordsAPI\n * @param word\n * @returns {Promise<unknown>}\n */\nexport function getWordInfo(word) {\n    return new Promise(async (resolve, reject) => {\n        const response = await fetch(\"https://wordsapiv1.p.rapidapi.com/words/\" + word, {\n            \"method\": \"GET\",\n            \"headers\": headers\n        });\n        const values = await response.json();\n        values[\"found\"] = response.status === 200;\n\n        resolve(values);\n    })\n}\n","import React from \"react\";\n\nimport { Header, Placeholder, Divider } from \"semantic-ui-react\";\nimport {getWordInfo} from \"../language/dictionary\";\n\nconst compactStyle = {\n    marginTop: 0,\n    marginBottom: 0,\n}\n\nclass WordDefinition extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            info: null\n        }\n\n        this.getPlaceholder = this.getPlaceholder.bind(this);\n        this.getNoWordsFound = this.getNoWordsFound.bind(this);\n    }\n    async componentDidMount() {\n        const info = await getWordInfo(this.props.word);\n        this.setState({info: info});\n    }\n\n    getPlaceholder() {\n        return (\n            <>\n                <Header as=\"h1\">{this.props.word}</Header>\n                <Placeholder style={{ minWidth: '200px' }}>\n                    <Placeholder.Header>\n                        <Placeholder.Line />\n                    </Placeholder.Header>\n                    <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                    </Placeholder.Paragraph>\n                </Placeholder>\n            </>\n        );\n    }\n\n    getNoWordsFound() {\n        return (\n            <>\n                <Header as=\"h1\">{this.props.word}</Header>\n                <Header as='h4' color='red'>Word not found.</Header>\n            </>\n        );\n    }\n\n    render() {\n        if (this.state.info === null) {\n            return (this.getPlaceholder());\n        }\n        if (!this.state.info[\"found\"]) {\n            return (this.getNoWordsFound());\n        }\n        const meanings = [\n            <Header size=\"huge\" as=\"h1\" style={compactStyle}>\n                {this.props.word}\n            </Header>,\n        ]\n\n        // add pronunciation\n        try {\n            meanings.push(<p>{this.state.info[\"pronunciation\"][\"all\"]}</p>)\n        } catch (e) {\n            try {\n                meanings.push(<p>{this.state.info[\"pronunciation\"]}</p>)\n            } catch (e) {}\n        }\n\n        // add definitions\n        try {\n            for (const response of this.state.info[\"results\"]) {\n                meanings.push(\n                    <div>\n                        <Divider />\n                        <Header as=\"h3\" style={compactStyle}>{response[\"partOfSpeech\"]}</Header>\n                        {response[\"synonyms\"] !== undefined ?\n                            <p style={compactStyle}><i>Synonyms: {response[\"synonyms\"].join(\", \")}</i></p>\n                            : \"\"}\n                        <p style={compactStyle}>{response[\"definition\"]}</p>\n                    </div>\n                )\n            }\n        } catch (e) {}\n\n        return meanings\n    }\n}\n\nexport default WordDefinition;","import React from \"react\";\nimport { List, Popup, Button} from \"semantic-ui-react\";\nimport WordDefinition from \"./WordDefinition\";\n\nclass WordList extends React.Component {\n    render() {\n        const enableWord = (word) => {\n            word.enabled = true;\n            this.props.onEnabledToggle();\n        }\n        const disableWord = (word) => {\n            word.enabled = false;\n            this.props.onEnabledToggle();\n        }\n\n        return (\n            <List animated\n                  celled\n                  selection\n                  relaxed\n                  size=\"huge\"\n                  verticalAlign='middle'\n                  style={{height: \"auto\", overflowY: \"scroll\"}}\n            >\n                {this.props.words.map(word =>\n                    <List.Item>\n                        <Popup wide\n                               on=\"click\"\n                               position=\"bottom right\"\n                               onOpen={() => this.props.onPreview(word.text)}\n                               onClose={this.props.onPreviewClose}\n                               trigger={\n                                        <List.Content floated='left'>\n                                            <List.Header>\n                                                {word.enabled ? word.text\n                                                              : <del>{word.text}</del>}\n                                            </List.Header>\n                                        </List.Content>\n                               }\n                               style={{\n                                   maxHeight: 350,\n                                   overflowY: \"scroll\",\n                               }}\n                        >\n                        <Popup.Content>\n                            <WordDefinition word={word.text}/>\n                        </Popup.Content>\n                        </Popup>\n                        <List.Content floated='right'>\n                            {word.enabled ? <Button size=\"mini\"\n                                                    // color=\"red\"\n                                                    onClick={()=>disableWord(word)}\n                                            >\n                                                strike out\n                                            </Button>\n                                          : <Button size=\"mini\"\n                                                    color=\"teal\"\n                                                    onClick={()=>enableWord(word)}\n                                            >\n                                                unstrike\n                                            </Button>}\n                        </List.Content>\n                    </List.Item>\n                )}\n            </List>\n        )\n    }\n}\n\nexport default WordList;","/**\n * Get a list of available cells from the current position.\n * @param currentCell [x, y] of current cell\n * @param rowCount number of rows in the table\n * @param columnCount number of columns in the table\n */\nimport {containsSubarray} from \"./arrayUtils\";\n\nfunction availableCells(currentCell, rowCount, columnCount) {\n    // if not currently on a cell, all cells are available\n    if (currentCell === null) {\n        let allCells = [];\n\n        for (let i=0; i<rowCount; i++) {\n            for (let j=0; j<columnCount; j++) {\n                allCells.push([i, j]);\n            }\n        }\n\n        return allCells;\n    } else {\n        let neighbouringCells = [];\n\n        for (let i=-1; i<=1; i++) {\n            for (let j=-1; j<=1; j++) {\n                let x = currentCell[0] + i;\n                let y = currentCell[1] + j;\n\n                if (x < 0 || y < 0) { continue; }  // can't go out of bounds\n                if (i === 0 && j === 0) { continue; }  // can't visit same cell\n                if (x >= rowCount || y >= columnCount) { continue; }  // can't go out of bounds\n\n                neighbouringCells.push([x, y]);\n            }\n        }\n\n        return neighbouringCells;\n    }\n}\n\n/**\n * Return a list of coordinates of the word within the\n * letterGrid game board.\n * @param word\n * @type word string\n * @param letterGrid\n */\nexport function solve(word, letterGrid) {\n    let rowCount = letterGrid.length;\n    let columnCount = letterGrid.length;\n\n    let currentCell = null;\n    let visitedCells = [];\n\n    return solveStep(word.toUpperCase(), currentCell, visitedCells, letterGrid, rowCount, columnCount);\n}\n\nfunction solveStep(word, currentCell, visitedCells, letterGrid, rowCount, columnCount) {\n\n    if (word.length === 0) {\n        return visitedCells;\n    }\n\n    for (const cell of availableCells(currentCell, rowCount, columnCount)) {\n        if (containsSubarray(visitedCells, cell)) {\n            continue;\n        }\n\n        let availableLetter = letterGrid[cell[0]][cell[1]].toUpperCase();\n\n        // this is a step in the right direction, advance to next letter\n        if (word.startsWith(availableLetter)) {\n            visitedCells.push(cell);\n            let response = solveStep(word.slice(availableLetter.length, word.length), cell, visitedCells, letterGrid, rowCount, columnCount);\n\n            if (response === null) {\n                // we went down a dead end\n                visitedCells.pop();\n            } else {\n                // has been solved\n                return response;\n            }\n        }\n    }\n    return null;  // no cell was available\n}\n","import {randomChoice} from \"./arrayUtils\";\n\n\nconst dice = [\n    [\"R\", \"I\", \"F\", \"O\", \"B\", \"X\"],\n    [\"I\", \"F\", \"E\", \"H\", \"E\", \"Y\"],\n    [\"D\", \"E\", \"N\", \"O\", \"W\", \"S\"],\n    [\"U\", \"T\", \"O\", \"K\", \"N\", \"D\"],\n    [\"H\", \"M\", \"S\", \"R\", \"A\", \"O\"],\n    [\"L\", \"U\", \"P\", \"E\", \"T\", \"S\"],\n    [\"A\", \"C\", \"I\", \"T\", \"O\", \"A\"],\n    [\"Y\", \"L\", \"G\", \"K\", \"U\", \"E\"],\n    [\"Qu\", \"B\", \"M\", \"J\", \"O\", \"A\"],\n    [\"E\", \"H\", \"I\", \"S\", \"P\", \"N\"],\n    [\"V\", \"E\", \"T\", \"I\", \"G\", \"N\"],\n    [\"B\", \"A\", \"L\", \"I\", \"Y\", \"T\"],\n    [\"E\", \"Z\", \"A\", \"V\", \"N\", \"D\"],\n    [\"R\", \"A\", \"L\", \"E\", \"S\", \"C\"],\n    [\"U\", \"W\", \"I\", \"L\", \"R\", \"G\"],\n    [\"P\", \"A\", \"C\", \"E\", \"M\", \"D\"],\n]\n\n/**\n * @returns a deep copy of the dice set\n */\nfunction getDiceSet() {\n    return JSON.parse(JSON.stringify(dice));\n}\n\n/**\n * Generate a boogle gameboard using the dice.\n * The gameboard can be of arbitrary size, but all of the dice\n * will be used exactly ONCE for a 4x4 or 16x1 game.\n * @param width\n * @param height\n */\nexport function generateGameBoard(width, height) {\n    const gameBoard = [];\n\n    let dice = [];\n\n    for (let i=0; i<width; i++) {\n        const row = []\n\n        for (let j=0; j<width; j++) {\n            if (dice.length === 0) {\n                dice = getDiceSet();\n            }\n            const die = randomChoice(dice, true);\n            const letter = randomChoice(die);\n            row.push(letter)\n        }\n        gameBoard.push(row);\n    }\n\n    return gameBoard;\n}","/**\n * Get the score of a word in boogle.\n * @param word\n */\nexport function getScore(word) {\n    return Math.max(word.length - 2, 0);\n}\n\nexport class Word {\n    constructor(word) {\n        this.text = word;\n        this.enabled = true;\n    }\n}","import React from \"react\";\nimport {Grid, Statistic} from \"semantic-ui-react\";\nimport {getScore} from \"../logic/game\";\n\nclass Scoreboard extends React.Component {\n    render() {\n        let wordCount = 0;\n        let score = 0;\n\n        for (const word of this.props.wordList) {\n            if (word.enabled) {\n                wordCount++;\n                score += getScore(word.text);\n            }\n        }\n\n        return (\n            <Statistic.Group widths=\"two\">\n                <Statistic label={\"Word\"+(wordCount!==1?\"s\":\"\")} value={wordCount} />\n                <Statistic label={\"Point\"+(score!==1?\"s\":\"\")} value={score} />\n            </Statistic.Group>\n        )\n    }\n}\n\nexport default Scoreboard;","import React from \"react\";\nimport {Dropdown, Button, Dimmer, Header, Icon} from \"semantic-ui-react\";\nimport {randomChoice} from \"../logic/arrayUtils\";\n\n\nfunction formatSeconds(sec_num) {\n    sec_num = Math.round(sec_num);\n    let hours   = Math.floor(sec_num / 3600);\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    let seconds = Math.round(sec_num - (hours * 3600) - (minutes * 60));\n\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return `${minutes}:${seconds}`;\n}\n\nconst timeoutMessages = [\n    \"Time's up!\",\n    \"That's all, folks!\",\n    \"Pencils down!\",\n    \"Quit it!\",\n    \"CEASE!\",\n]\n\nconst timeoutSubMessages = [\n    \"Better luck next time.\",\n    \"Oi oi, no cheating!\",\n    \"Don't make me come over there!\",\n    \"Yes that does mean you, Helen.\",\n    \"You should have quit while you were ahead.\",\n    \"I'd offer you commiserations, but even that may be giving you a bit too much credit.\",\n    \"Persistence is futile.\"\n]\n\nconst timeoutIcons = [\n    \"hand spock outline\",\n    \"eye\",\n    \"bomb\",\n    \"fire\",\n    \"heart outline\",\n    \"lightbulb outline\",\n    \"camera\",\n    \"stopwatch\",\n    \"pencil\",\n]\n\nconst timerOptions = [\n    // {\n    //     key: 0,\n    //     text: \"3 seconds\",\n    //     value: 3,\n    // },\n    {\n        key: 0,\n        text: \"30 seconds\",\n        value: 30,\n    },\n    {\n        key: 1,\n        text: \"1 minute\",\n        value: 60,\n    },\n    {\n        key: 2,\n        text: \"2 minutes\",\n        value: 120,\n    },\n    {\n        key: 3,\n        text: \"3 minutes\",\n        value: 180,\n    },\n]\n\nexport default class CountdownTimer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isActive: false,\n            duration: timerOptions[2].value,\n            stopTime: null,\n            displayText: \"\",\n\n            isDimmerActive: false,\n            dimmerText: \"\",\n            dimmerMessage: \"\",\n            dimmerIcon: \"\",\n        }\n\n        this.timerId = null;\n\n        this.startTimer = this.startTimer.bind(this);\n        this.handleTimerUpdate = this.handleTimerUpdate.bind(this);\n        this.onTimerFinish = this.onTimerFinish.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n    }\n\n    startTimer() {\n        this.setState({\n            isActive: true,\n            stopTime: Date.now() + this.state.duration * 1000\n        });\n\n        this.timerId = setInterval(this.handleTimerUpdate, 1000);\n        setTimeout(this.handleTimerUpdate, 0);\n    }\n\n    handleTimerUpdate() {\n        let now = Date.now();\n        let until = (this.state.stopTime - now) / 1000;  // time until timer end, in seconds\n\n        this.setState({\n            displayText: formatSeconds(Math.max(until, 0))\n        })\n\n        if (until <= 0) {\n            this.onTimerFinish();\n        }\n    }\n\n    onTimerFinish() {\n        this.stopTimer();\n        this.setState({\n            isDimmerActive: true,\n            dimmerText: randomChoice(timeoutMessages),\n            dimmerMessage: randomChoice(timeoutSubMessages),\n            dimmerIcon: randomChoice(timeoutIcons),\n        })\n    }\n\n    stopTimer() {\n        this.setState({\n            isActive: false,\n            stopTime: null,\n            displayText: \"\",\n        });\n        if (this.timerId !== null) {\n            clearInterval(this.timerId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n\n    render() {\n        let content;\n\n        if (!this.state.isActive) {\n            content = (\n                <span>\n                    Set timer for{\" \"}\n                    <Dropdown inline\n                              options={timerOptions}\n                              value={this.state.duration}\n                              onChange={(event, data)=> this.setState({duration: data.value})}\n                    />\n                    <br/>\n                    <Button color=\"green\"\n                            onClick={this.startTimer}\n                    >\n                        Go!\n                    </Button>\n                </span>\n            )\n        }\n        else {\n            content = (\n                <span>\n                    <Button icon=\"times\"\n                            label={{style: {fontSize: 20}, as: \"span\", content: this.state.displayText}}\n                            labelPosition=\"left\"\n                            size=\"huge\"\n                            onClick={this.stopTimer}\n                    />\n                </span>\n            )\n        }\n\n        return [\n            content,\n            <Dimmer active={this.state.isDimmerActive}\n                    page\n                    onClickOutside={()=>this.setState({isDimmerActive: false})}\n            >\n                <Icon name={this.state.dimmerIcon} size='massive' />\n                <Header as=\"h1\" inverted>{this.state.dimmerText}</Header>\n                <span>{this.state.dimmerMessage}</span>\n            </Dimmer>\n        ]\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport LetterGrid from \"./components/LetterGrid\";\nimport {Button, Container, Form, Grid, Header, Icon, Segment, Item} from \"semantic-ui-react\";\nimport SearchBar from \"./components/SearchBar\";\nimport WordList from \"./components/WordList\";\nimport {solve} from \"./logic/solver\";\nimport {generateGameBoard} from \"./logic/generator\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport {Word} from \"./logic/game\";\nimport CountdownTimer from \"./components/CountdownTimer\";\n\nimport { isBrowser, isMobile } from \"react-device-detect\";\n\nconst letters = [\n    [\"A\", \"B\", \"C\", \"D\"],\n    [\"E\", \"F\", \"G\", \"H\"],\n    [\"I\", \"J\", \"K\", \"L\"],\n    [\"M\", \"N\", \"O\", \"Qu\"],\n]\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            word: \"\",\n\n            grid: letters,\n            solvePath: null,\n\n            wordList: [],\n\n            inputIsDisabled: false,\n        }\n\n        this.isValid = this.isValid.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.addLetter = this.addLetter.bind(this);\n\n        this.focusSearchField = this.focusSearchField.bind(this);\n\n        this.handleWordUpdate = this.handleWordUpdate.bind(this);\n        this.handleSearchFormSubmit = this.handleSearchFormSubmit.bind(this);\n\n        this.handleWordPreview = this.handleWordPreview.bind(this);\n        this.handleWordPreviewClose = this.handleWordPreviewClose.bind(this);\n\n        this.onWordEnabledChange = this.onWordEnabledChange.bind(this);\n        this.searchFieldRef = React.createRef();\n    }\n\n    resetGame() {\n        this.setState({\n            word: \"\",\n\n            grid: generateGameBoard(4, 4),\n            solvePath: null,\n\n            wordList: []\n        });\n    }\n\n    componentDidMount() {\n        this.resetGame();\n        this.focusSearchField(true);\n    }\n\n    handleWordUpdate(word) {\n\n        let solvePath = solve(word, this.state.grid);\n        this.setState({\n            word: word,\n            solvePath: solvePath,\n        });\n\n        this.focusSearchField();\n    }\n\n    handleSearchFormSubmit() {\n        if (!this.state.word) { return; }\n        if (!this.isValid()) { return; }\n        this.setState({\n            wordList: [...this.state.wordList, new Word(this.state.word)],\n            solvePath: null,\n            word: \"\",\n        })\n        this.focusSearchField();\n    }\n\n    /**\n     * Preview the path of the highlighted word in the word list in the game board\n     */\n    handleWordPreview(word) {\n        this.lastInput = this.state.word;\n        this.handleWordUpdate(word);\n        this.setState({inputIsDisabled: true})\n    }\n\n    handleWordPreviewClose() {\n        this.handleWordUpdate(this.lastInput);\n    }\n\n    isValid() {\n        return this.state.solvePath !== null || this.state.word.length === 0;\n    }\n\n    addLetter(letter) {\n        this.handleWordUpdate(this.state.word + letter.toLowerCase());\n    }\n\n    /**\n     * I'm pretty sure this is not good practice, but can't think of a better way.\n     */\n    onWordEnabledChange() {\n        this.setState({\n            wordList: this.state.wordList,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Container>\n                    <Segment>\n                        <Grid divided stackable>\n                            <Grid.Row>\n                                <Grid.Column>\n                                    <Item link as=\"a\" href={\"https://github.com/MitchellKehn/boogle\"}>\n                                        <Header as=\"h1\" size=\"huge\">Boogle!</Header>\n                                    </Item>\n                                </Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={10}>\n                                    <Grid>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <Form onSubmit={this.handleSearchFormSubmit}>\n                                                    <SearchBar word={this.state.word}\n                                                               isValid={this.isValid()}\n                                                               onUpdate={(word) => this.handleWordUpdate(word)}\n                                                               ref={this.searchFieldRef}\n                                                    />\n                                                </Form>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <LetterGrid letters={this.state.grid}\n                                                            solvePath={this.state.solvePath}\n                                                            addLetter={this.addLetter}\n                                                />\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <Button.Group floated=\"right\">\n                                                    <Button icon size=\"large\" color=\"green\" onClick={this.handleSearchFormSubmit}><Icon name=\"sign-in\"/></Button>\n                                                    <Button icon size=\"large\" primary onClick={this.resetGame}><Icon name=\"refresh\"/></Button>\n                                                    <Button icon disabled size=\"large\" secondary><Icon name=\"calculator\"/></Button>\n                                                </Button.Group>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Grid.Column>\n                                <Grid.Column width={6}>\n                                    <Grid verticalAlign='middle'>\n                                        <Grid.Row columns={2}>\n                                            <Grid.Column>\n                                                <Scoreboard wordList={this.state.wordList}/>\n                                            </Grid.Column>\n                                            <Grid.Column>\n                                                <CountdownTimer />\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <WordList words={this.state.wordList}\n                                                          onPreview={this.handleWordPreview}\n                                                          onPreviewClose={this.handleWordPreviewClose}\n                                                          onEnabledToggle={this.onWordEnabledChange}\n                                                />\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n                </Container>\n            </div>\n        );\n    }\n\n    focusSearchField(force=false) {\n        if (isBrowser || force) {\n            this.searchFieldRef.current.focus();\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}